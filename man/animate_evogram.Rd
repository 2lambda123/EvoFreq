% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Animate_funcs.R
\name{animate_evogram}
\alias{animate_evogram}
\title{animate_evogram

View changes in the dendrogram over time. Has most of the same options as \code{\link{plot_evogram}}, but does not have option to set link type}
\usage{
animate_evogram(size_df, clones, parents, time_pts = NULL,
  attribute_df = NULL, attribute_val_name = NULL,
  clone_id_col_in_att_df = "clone_id", clone_cmap = "rainbow_soft",
  threshold = 0.01, data_type = "size", fill_gaps_in_size = F,
  test_links = T, attribute_val_range = NULL, node_size = 5,
  scale_by_node_size = T, orientation = "td", depth = "level")
}
\arguments{
\item{size_df}{Dataframe in a wide format, where each row corrsponds to a single clone, and the columns are the sizes of that clone at each timepoint}

\item{clones}{Array containing the clone ids. The index of each clone must correspond to the same index of the row in \code{size_df} that contains the sizes of that clone over time}

\item{parents}{Array containing the ids of the parent of each clone in the \code{clones} array.}

\item{time_pts}{Array containing the name of the timepoints. If NULL, then the name of timepoints will be a sequence from 1 to the number of columns in \code{size_df}.}

\item{attribute_df}{Optional dataframe containing attributes for each clone that can be used to determine the color of each clone in the plot. This can include a column of custom colors to use \code{attribute_val_name}.}

\item{attribute_val_name}{String defining which column in \code{attribute_df} will be used to color each clone. If attribute column values are a hex code in this column, these colors will be used instead of \code{clone_cmap}.}

\item{clone_id_col_in_att_df}{Name of the column in attribute_df that contains the clone IDs}

\item{clone_cmap}{Colormap to use for the clones. For a list of available colormaps, see \code{\link[colormap]{colormaps}}.}

\item{threshold}{The minimum frequency of clones to be plotted. Clones with with a frequency below this value will not be plotted}

\item{data_type}{String defining what kind of information is in size_df. If "size", then the values in \code{size_df} are the population sizes. If "mutation", the values are the frequencies, between 0 and 1, of each mutation in the population over time}

\item{fill_gaps_in_size}{Boolean defining whether or not missing sizes should be filled in}

\item{test_links}{Make sure clone does not have the same id as it's parent. If true, it can cause infinite recursion.}

\item{attribute_val_range}{Range of values for the attribute to color by. If NULL, then range is determined from the attribute data}

\item{node_size}{Determines the size of nodes if \code{scale_by_node_size} is FALSE}

\item{scale_by_node_size}{Boolean defining if the size of each node should be proportional to its frequency. If FALSE, then all nodes have the same size, determined by \code{node_size}}

\item{orientation}{Defines orientation of the tree: "td" draws it top-down, "lr" draws it left-right}

\item{depth}{Determines the y-position of the nodes: "level" places the nodes based on how deeply they are nested in the tree, "origin" makes the y-position the same as the clone's origin time, "bottom" positions nodes so that all leaves have the same position, furthest from the root}
}
\value{
List infromation need to craete the animation: "dendro_pos_df" contains all of the positions of the nodes and edges at each timestep, while "animation_plot" that can be used with gganimate to create the animation. For details on how to customize and save the animation, see \code{\link[gganimate]{gganimate}}
}
\description{
animate_evogram

View changes in the dendrogram over time. Has most of the same options as \code{\link{plot_evogram}}, but does not have option to set link type
}
\examples{
data("example.easy.wide.with.attributes")
### Split dataframe into clone info and size info using fact timepoint column names can be converted to numeric values
time_col_idx <- suppressWarnings(which(! is.na(as.numeric(colnames(example.easy.wide.with.attributes)))))
attribute_col_idx <- suppressWarnings(which(is.na(as.numeric(colnames(example.easy.wide.with.attributes)))))
attribute_df <- example.easy.wide.with.attributes[, attribute_col_idx]
size_df <- example.easy.wide.with.attributes[, time_col_idx]
parents <- example.easy.wide.with.attributes$parent
clones <- example.easy.wide.with.attributes$clone
dendro_movie_info <- animate_evogram(size_df, clones = clones, parents = parents, attribute_df = attribute_df, attribute_val_name = "fitness", clone_cmap = "magma", clone_id_col_in_att_df = "clone")
# dendro_movie_info <- animate_evogram(size_df, clones = clones, parents = parents)
pos_df <- dendro_movie_info$dendro_pos_df
dendro_movie_plot <- dendro_movie_info$animation_plot
#'
### Add gganimate object to dendro_movie_plot to finish animation
\donttest{
library(gganimate)
movie_p <- dendro_movie_plot +
transition_time(time) +
ease_aes() +
exit_shrink() +
ggtitle('Time {frame_time}')

print(movie_p)
}
}
